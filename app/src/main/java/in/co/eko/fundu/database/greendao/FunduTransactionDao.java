package in.co.eko.fundu.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FUNDU_TRANSACTION".
*/
public class FunduTransactionDao extends AbstractDao<FunduTransaction, Long> {

    public static final String TABLENAME = "FUNDU_TRANSACTION";

    /**
     * Properties of entity FunduTransaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, String.class, "tid", false, "TID");
        public final static Property Seeker = new Property(2, String.class, "seeker", false, "SEEKER");
        public final static Property Provider = new Property(3, String.class, "provider", false, "PROVIDER");
        public final static Property Custid = new Property(4, String.class, "custid", false, "CUSTID");
        public final static Property PhoneNumber = new Property(5, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Image = new Property(7, String.class, "image", false, "IMAGE");
        public final static Property Fee = new Property(8, String.class, "fee", false, "FEE");
        public final static Property Rating = new Property(9, String.class, "rating", false, "RATING");
        public final static Property Code = new Property(10, String.class, "code", false, "CODE");
        public final static Property ProviderCharge = new Property(11, String.class, "providerCharge", false, "PROVIDER_CHARGE");
        public final static Property Latitude = new Property(12, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(13, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Amount = new Property(14, String.class, "amount", false, "AMOUNT");
        public final static Property State = new Property(15, Integer.class, "state", false, "STATE");
        public final static Property Status = new Property(16, String.class, "status", false, "STATUS");
        public final static Property PairRequestId = new Property(17, String.class, "pairRequestId", false, "PAIR_REQUEST_ID");
        public final static Property RequestLatitude = new Property(18, Double.class, "requestLatitude", false, "REQUEST_LATITUDE");
        public final static Property RequestLongitude = new Property(19, Double.class, "requestLongitude", false, "REQUEST_LONGITUDE");
    }


    public FunduTransactionDao(DaoConfig config) {
        super(config);
    }
    
    public FunduTransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FUNDU_TRANSACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TID\" TEXT UNIQUE ," + // 1: tid
                "\"SEEKER\" TEXT," + // 2: seeker
                "\"PROVIDER\" TEXT," + // 3: provider
                "\"CUSTID\" TEXT," + // 4: custid
                "\"PHONE_NUMBER\" TEXT," + // 5: phoneNumber
                "\"NAME\" TEXT," + // 6: name
                "\"IMAGE\" TEXT," + // 7: image
                "\"FEE\" TEXT," + // 8: fee
                "\"RATING\" TEXT," + // 9: rating
                "\"CODE\" TEXT," + // 10: code
                "\"PROVIDER_CHARGE\" TEXT," + // 11: providerCharge
                "\"LATITUDE\" REAL," + // 12: latitude
                "\"LONGITUDE\" REAL," + // 13: longitude
                "\"AMOUNT\" TEXT," + // 14: amount
                "\"STATE\" INTEGER," + // 15: state
                "\"STATUS\" TEXT," + // 16: status
                "\"PAIR_REQUEST_ID\" TEXT," + // 17: pairRequestId
                "\"REQUEST_LATITUDE\" REAL," + // 18: requestLatitude
                "\"REQUEST_LONGITUDE\" REAL);"); // 19: requestLongitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FUNDU_TRANSACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FunduTransaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String seeker = entity.getSeeker();
        if (seeker != null) {
            stmt.bindString(3, seeker);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(4, provider);
        }
 
        String custid = entity.getCustid();
        if (custid != null) {
            stmt.bindString(5, custid);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(6, phoneNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(9, fee);
        }
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(10, rating);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(11, code);
        }
 
        String providerCharge = entity.getProviderCharge();
        if (providerCharge != null) {
            stmt.bindString(12, providerCharge);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(13, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(14, longitude);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(15, amount);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(16, state);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(17, status);
        }
 
        String pairRequestId = entity.getPairRequestId();
        if (pairRequestId != null) {
            stmt.bindString(18, pairRequestId);
        }
 
        Double requestLatitude = entity.getRequestLatitude();
        if (requestLatitude != null) {
            stmt.bindDouble(19, requestLatitude);
        }
 
        Double requestLongitude = entity.getRequestLongitude();
        if (requestLongitude != null) {
            stmt.bindDouble(20, requestLongitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FunduTransaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String seeker = entity.getSeeker();
        if (seeker != null) {
            stmt.bindString(3, seeker);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(4, provider);
        }
 
        String custid = entity.getCustid();
        if (custid != null) {
            stmt.bindString(5, custid);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(6, phoneNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(9, fee);
        }
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(10, rating);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(11, code);
        }
 
        String providerCharge = entity.getProviderCharge();
        if (providerCharge != null) {
            stmt.bindString(12, providerCharge);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(13, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(14, longitude);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(15, amount);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(16, state);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(17, status);
        }
 
        String pairRequestId = entity.getPairRequestId();
        if (pairRequestId != null) {
            stmt.bindString(18, pairRequestId);
        }
 
        Double requestLatitude = entity.getRequestLatitude();
        if (requestLatitude != null) {
            stmt.bindDouble(19, requestLatitude);
        }
 
        Double requestLongitude = entity.getRequestLongitude();
        if (requestLongitude != null) {
            stmt.bindDouble(20, requestLongitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FunduTransaction readEntity(Cursor cursor, int offset) {
        FunduTransaction entity = new FunduTransaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // seeker
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // provider
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // custid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phoneNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fee
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rating
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // code
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // providerCharge
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // latitude
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // longitude
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // amount
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // state
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // status
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // pairRequestId
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // requestLatitude
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19) // requestLongitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FunduTransaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSeeker(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProvider(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoneNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFee(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRating(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProviderCharge(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLatitude(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setLongitude(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setAmount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setState(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setStatus(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPairRequestId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRequestLatitude(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setRequestLongitude(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FunduTransaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FunduTransaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FunduTransaction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
